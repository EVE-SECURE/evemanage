package lv.odylab.evemanage.client.presenter.tab.calculator;

import lv.odylab.evemanage.client.rpc.EveCalculator;
import lv.odylab.evemanage.client.rpc.PathExpression;
import lv.odylab.evemanage.client.rpc.dto.calculation.CalculationDto;
import lv.odylab.evemanage.client.rpc.dto.calculation.CalculationItemDto;
import lv.odylab.evemanage.client.rpc.dto.calculation.CalculationPriceSetItemDto;
import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertNull;

@SuppressWarnings({"NonJREEmulationClassesInClientCode"})
public class PricingProcessorTest {
    private PricingProcessor pricingProcessor;

    @Before
    public void setUp() {
        pricingProcessor = new PricingProcessor(new EveCalculator());
    }

    @Test
    public void testProcess_T1_Imicus() {
        CalculationDto calculation = new CalculationDto();
        calculation.setBlueprintTypeName("Imicus Blueprint");
        calculation.setMaterialLevel(40);
        calculation.setProductivityLevel(25);
        CalculationItemDto tritaniumCalculationItem = new CalculationItemDto();
        tritaniumCalculationItem.setPathExpression(PathExpression.parsePath("/607:40:25/34"));
        tritaniumCalculationItem.setPerfectQuantity(6629L);
        tritaniumCalculationItem.setItemTypeID(34L);
        tritaniumCalculationItem.setPrice("2.2");
        tritaniumCalculationItem.setWasteFactor(10);
        CalculationItemDto pyeriteCalculationItem = new CalculationItemDto();
        pyeriteCalculationItem.setPathExpression(PathExpression.parsePath("/607:40:25/35"));
        pyeriteCalculationItem.setPerfectQuantity(5422L);
        pyeriteCalculationItem.setItemTypeID(35L);
        pyeriteCalculationItem.setPrice("3");
        pyeriteCalculationItem.setWasteFactor(10);
        CalculationItemDto mexallonCalculationItem = new CalculationItemDto();
        mexallonCalculationItem.setPathExpression(PathExpression.parsePath("/607:40:25/36"));
        mexallonCalculationItem.setPerfectQuantity(1295L);
        mexallonCalculationItem.setItemTypeID(36L);
        mexallonCalculationItem.setPrice("26.85");
        mexallonCalculationItem.setWasteFactor(10);
        CalculationItemDto isogenCalculationItem = new CalculationItemDto();
        isogenCalculationItem.setPathExpression(PathExpression.parsePath("/607:40:25/37"));
        isogenCalculationItem.setPerfectQuantity(1L);
        isogenCalculationItem.setItemTypeID(37L);
        isogenCalculationItem.setPrice("51");
        isogenCalculationItem.setWasteFactor(10);
        CalculationItemDto zydrineCalculationItem = new CalculationItemDto();
        zydrineCalculationItem.setPathExpression(PathExpression.parsePath("/607:40:25/39"));
        zydrineCalculationItem.setPerfectQuantity(1L);
        zydrineCalculationItem.setItemTypeID(39L);
        zydrineCalculationItem.setPrice("1000.01");
        zydrineCalculationItem.setWasteFactor(10);
        List<CalculationItemDto> items = new ArrayList<CalculationItemDto>();
        items.add(tritaniumCalculationItem);
        items.add(pyeriteCalculationItem);
        items.add(mexallonCalculationItem);
        items.add(isogenCalculationItem);
        items.add(zydrineCalculationItem);
        calculation.setItems(items);
        CalculationTree calculationTree = new CalculationTree();
        calculationTree.build(calculation);

        PricingProcessorResult pricingProcessorResult = pricingProcessor.process(1L, calculationTree);
        Map<Long, CalculationPriceSetItemDto> typeIdToCalculationPriceSetItemMap = pricingProcessorResult.getTypeIdToCalculationPriceSetItemMap();
        assertEquals(5, typeIdToCalculationPriceSetItemMap.size());
        assertEquals("66826.31", new BigDecimal(pricingProcessorResult.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(6645), tritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(5435), pyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1298), mexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), isogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), zydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), tritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), pyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), mexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), isogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), zydrineCalculationItem.getParentQuantity());
        assertEquals("14619.0", new BigDecimal(tritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("16305.0", new BigDecimal(pyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("34851.3", new BigDecimal(mexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("51.0", new BigDecimal(isogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("1000.01", new BigDecimal(zydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(6645), typeIdToCalculationPriceSetItemMap.get(34L).getQuantity());
        assertEquals(Long.valueOf(5435), typeIdToCalculationPriceSetItemMap.get(35L).getQuantity());
        assertEquals(Long.valueOf(1298), typeIdToCalculationPriceSetItemMap.get(36L).getQuantity());
        assertEquals(Long.valueOf(1), typeIdToCalculationPriceSetItemMap.get(37L).getQuantity());
        assertEquals(Long.valueOf(1), typeIdToCalculationPriceSetItemMap.get(39L).getQuantity());
        assertEquals("14619.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getTotalPrice()).toPlainString());
        assertEquals("16305.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getTotalPrice()).toPlainString());
        assertEquals("34851.3", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getTotalPrice()).toPlainString());
        assertEquals("51.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getTotalPrice()).toPlainString());
        assertEquals("1000.01", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getTotalPrice()).toPlainString());

        pricingProcessorResult = pricingProcessor.process(500L, calculationTree);
        typeIdToCalculationPriceSetItemMap = pricingProcessorResult.getTypeIdToCalculationPriceSetItemMap();
        assertEquals(5, typeIdToCalculationPriceSetItemMap.size());
        assertEquals("33413155", new BigDecimal(pricingProcessorResult.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(6645), tritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(5435), pyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1298), mexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), isogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), zydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(500), tritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(500), pyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(500), mexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(500), isogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(500), zydrineCalculationItem.getParentQuantity());
        assertEquals("14619.0", new BigDecimal(tritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("16305.0", new BigDecimal(pyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("34851.3", new BigDecimal(mexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("51.0", new BigDecimal(isogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("1000.01", new BigDecimal(zydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(3322500), typeIdToCalculationPriceSetItemMap.get(34L).getQuantity());
        assertEquals(Long.valueOf(2717500), typeIdToCalculationPriceSetItemMap.get(35L).getQuantity());
        assertEquals(Long.valueOf(649000), typeIdToCalculationPriceSetItemMap.get(36L).getQuantity());
        assertEquals(Long.valueOf(500), typeIdToCalculationPriceSetItemMap.get(37L).getQuantity());
        assertEquals(Long.valueOf(500), typeIdToCalculationPriceSetItemMap.get(39L).getQuantity());
        assertEquals("7309500.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getTotalPrice()).toPlainString());
        assertEquals("8152500.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getTotalPrice()).toPlainString());
        assertEquals("17425650", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getTotalPrice()).toPlainString());
        assertEquals("25500.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getTotalPrice()).toPlainString());
        assertEquals("500005.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getTotalPrice()).toPlainString());
    }

    @Test
    public void testProcess_Capital_Obelisk() {
        CalculationDto calculation = new CalculationDto();
        calculation.setBlueprintTypeName("Obelisk Blueprint");
        calculation.setMaterialLevel(1);
        calculation.setProductivityLevel(1);
        CalculationItemDto capitalPropulsionEngineCalculationItem = new CalculationItemDto();
        capitalPropulsionEngineCalculationItem.setPathExpression(PathExpression.parsePath("/20187:1:1/21009"));
        capitalPropulsionEngineCalculationItem.setPerfectQuantity(15L);
        capitalPropulsionEngineCalculationItem.setItemTypeID(21009L);
        capitalPropulsionEngineCalculationItem.setPrice("4000000.0");
        capitalPropulsionEngineCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalArmorPlateCalculationItem = new CalculationItemDto();
        capitalArmorPlateCalculationItem.setPathExpression(PathExpression.parsePath("/20187:1:1/21017"));
        capitalArmorPlateCalculationItem.setPerfectQuantity(14L);
        capitalArmorPlateCalculationItem.setItemTypeID(21017L);
        capitalArmorPlateCalculationItem.setPrice("4200000.0");
        capitalArmorPlateCalculationItem.setWasteFactor(10);

        CalculationItemDto capitalCargoBayCalculationItem = new CalculationItemDto();
        capitalCargoBayCalculationItem.setPathExpression(PathExpression.parsePath("/20187:1:1/21027"));
        capitalCargoBayCalculationItem.setPerfectQuantity(80L);
        capitalCargoBayCalculationItem.setItemTypeID(21027L);
        capitalCargoBayCalculationItem.setPrice("3500000.0");
        capitalCargoBayCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayTritaniumCalculationItem = new CalculationItemDto();
        capitalCargoBayTritaniumCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/34"));
        capitalCargoBayTritaniumCalculationItem.setPerfectQuantity(787412L);
        capitalCargoBayTritaniumCalculationItem.setItemTypeID(34L);
        capitalCargoBayTritaniumCalculationItem.setPrice("2.2");
        capitalCargoBayTritaniumCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayPyeriteCalculationItem = new CalculationItemDto();
        capitalCargoBayPyeriteCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/35"));
        capitalCargoBayPyeriteCalculationItem.setPerfectQuantity(64939L);
        capitalCargoBayPyeriteCalculationItem.setItemTypeID(35L);
        capitalCargoBayPyeriteCalculationItem.setPrice("3");
        capitalCargoBayPyeriteCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayMexallonCalculationItem = new CalculationItemDto();
        capitalCargoBayMexallonCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/36"));
        capitalCargoBayMexallonCalculationItem.setPerfectQuantity(22154L);
        capitalCargoBayMexallonCalculationItem.setItemTypeID(36L);
        capitalCargoBayMexallonCalculationItem.setPrice("26.85");
        capitalCargoBayMexallonCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayIsogenCalculationItem = new CalculationItemDto();
        capitalCargoBayIsogenCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/37"));
        capitalCargoBayIsogenCalculationItem.setPerfectQuantity(3154L);
        capitalCargoBayIsogenCalculationItem.setItemTypeID(37L);
        capitalCargoBayIsogenCalculationItem.setPrice("51");
        capitalCargoBayIsogenCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayNocxiumCalculationItem = new CalculationItemDto();
        capitalCargoBayNocxiumCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/38"));
        capitalCargoBayNocxiumCalculationItem.setPerfectQuantity(898L);
        capitalCargoBayNocxiumCalculationItem.setItemTypeID(38L);
        capitalCargoBayNocxiumCalculationItem.setPrice("80");
        capitalCargoBayNocxiumCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayZydrineCalculationItem = new CalculationItemDto();
        capitalCargoBayZydrineCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/39"));
        capitalCargoBayZydrineCalculationItem.setPerfectQuantity(129L);
        capitalCargoBayZydrineCalculationItem.setItemTypeID(39L);
        capitalCargoBayZydrineCalculationItem.setPrice("1000.01");
        capitalCargoBayZydrineCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalCargoBayMegacyteCalculationItem = new CalculationItemDto();
        capitalCargoBayMegacyteCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21027:10:10/40"));
        capitalCargoBayMegacyteCalculationItem.setPerfectQuantity(29L);
        capitalCargoBayMegacyteCalculationItem.setItemTypeID(40L);
        capitalCargoBayMegacyteCalculationItem.setPrice("1800");
        capitalCargoBayMegacyteCalculationItem.setWasteFactor(10);

        CalculationItemDto capitalConstructionPartsCalculationItem = new CalculationItemDto();
        capitalConstructionPartsCalculationItem.setPathExpression(PathExpression.parsePath("/20187:1:1/21037"));
        capitalConstructionPartsCalculationItem.setPerfectQuantity(50L);
        capitalConstructionPartsCalculationItem.setItemTypeID(21037L);
        capitalConstructionPartsCalculationItem.setPrice("4000000.0");
        capitalConstructionPartsCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsTritaniumCalculationItem = new CalculationItemDto();
        capitalConstructionPartsTritaniumCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/34"));
        capitalConstructionPartsTritaniumCalculationItem.setPerfectQuantity(349387L);
        capitalConstructionPartsTritaniumCalculationItem.setItemTypeID(34L);
        capitalConstructionPartsTritaniumCalculationItem.setPrice("2.2");
        capitalConstructionPartsTritaniumCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsPyeriteCalculationItem = new CalculationItemDto();
        capitalConstructionPartsPyeriteCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/35"));
        capitalConstructionPartsPyeriteCalculationItem.setPerfectQuantity(84399L);
        capitalConstructionPartsPyeriteCalculationItem.setItemTypeID(35L);
        capitalConstructionPartsPyeriteCalculationItem.setPrice("3");
        capitalConstructionPartsPyeriteCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsMexallonCalculationItem = new CalculationItemDto();
        capitalConstructionPartsMexallonCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/36"));
        capitalConstructionPartsMexallonCalculationItem.setPerfectQuantity(33959L);
        capitalConstructionPartsMexallonCalculationItem.setItemTypeID(36L);
        capitalConstructionPartsMexallonCalculationItem.setPrice("26.85");
        capitalConstructionPartsMexallonCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsIsogenCalculationItem = new CalculationItemDto();
        capitalConstructionPartsIsogenCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/37"));
        capitalConstructionPartsIsogenCalculationItem.setPerfectQuantity(4549L);
        capitalConstructionPartsIsogenCalculationItem.setItemTypeID(37L);
        capitalConstructionPartsIsogenCalculationItem.setPrice("51");
        capitalConstructionPartsIsogenCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsNocxiumCalculationItem = new CalculationItemDto();
        capitalConstructionPartsNocxiumCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/38"));
        capitalConstructionPartsNocxiumCalculationItem.setPerfectQuantity(1377L);
        capitalConstructionPartsNocxiumCalculationItem.setItemTypeID(38L);
        capitalConstructionPartsNocxiumCalculationItem.setPrice("80");
        capitalConstructionPartsNocxiumCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsZydrineCalculationItem = new CalculationItemDto();
        capitalConstructionPartsZydrineCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/39"));
        capitalConstructionPartsZydrineCalculationItem.setPerfectQuantity(242L);
        capitalConstructionPartsZydrineCalculationItem.setItemTypeID(39L);
        capitalConstructionPartsZydrineCalculationItem.setPrice("1000.01");
        capitalConstructionPartsZydrineCalculationItem.setWasteFactor(10);
        CalculationItemDto capitalConstructionPartsMegacyteCalculationItem = new CalculationItemDto();
        capitalConstructionPartsMegacyteCalculationItem.setPathExpression(PathExpression.parsePath("/20187/21037:15:15/40"));
        capitalConstructionPartsMegacyteCalculationItem.setPerfectQuantity(95L);
        capitalConstructionPartsMegacyteCalculationItem.setItemTypeID(40L);
        capitalConstructionPartsMegacyteCalculationItem.setPrice("1800");
        capitalConstructionPartsMegacyteCalculationItem.setWasteFactor(10);

        List<CalculationItemDto> items = new ArrayList<CalculationItemDto>();
        items.add(capitalPropulsionEngineCalculationItem);
        items.add(capitalArmorPlateCalculationItem);
        items.add(capitalCargoBayCalculationItem);
        items.add(capitalConstructionPartsCalculationItem);
        items.add(capitalCargoBayTritaniumCalculationItem);
        items.add(capitalCargoBayPyeriteCalculationItem);
        items.add(capitalCargoBayMexallonCalculationItem);
        items.add(capitalCargoBayIsogenCalculationItem);
        items.add(capitalCargoBayNocxiumCalculationItem);
        items.add(capitalCargoBayZydrineCalculationItem);
        items.add(capitalCargoBayMegacyteCalculationItem);
        items.add(capitalConstructionPartsTritaniumCalculationItem);
        items.add(capitalConstructionPartsPyeriteCalculationItem);
        items.add(capitalConstructionPartsMexallonCalculationItem);
        items.add(capitalConstructionPartsIsogenCalculationItem);
        items.add(capitalConstructionPartsNocxiumCalculationItem);
        items.add(capitalConstructionPartsZydrineCalculationItem);
        items.add(capitalConstructionPartsMegacyteCalculationItem);
        calculation.setItems(items);
        CalculationTree calculationTree = new CalculationTree();
        calculationTree.build(calculation);

        PricingProcessorResult pricingProcessorResult = pricingProcessor.process(1L, calculationTree);
        Map<Long, CalculationPriceSetItemDto> typeIdToCalculationPriceSetItemMap = pricingProcessorResult.getTypeIdToCalculationPriceSetItemMap();
        assertEquals(9, typeIdToCalculationPriceSetItemMap.size());
        assertEquals("519260766.67", new BigDecimal(pricingProcessorResult.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(16), capitalPropulsionEngineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(15), capitalArmorPlateCalculationItem.getQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayCalculationItem.getQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsCalculationItem.getQuantity());
        assertEquals(Long.valueOf(794570), capitalCargoBayTritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(65529), capitalCargoBayPyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(22355), capitalCargoBayMexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(3183), capitalCargoBayIsogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(906), capitalCargoBayNocxiumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(130), capitalCargoBayZydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(29), capitalCargoBayMegacyteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(351571), capitalConstructionPartsTritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(84926), capitalConstructionPartsPyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(34171), capitalConstructionPartsMexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(4577), capitalConstructionPartsIsogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1386), capitalConstructionPartsNocxiumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(244), capitalConstructionPartsZydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(96), capitalConstructionPartsMegacyteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1), capitalPropulsionEngineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), capitalArmorPlateCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), capitalCargoBayCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(1), capitalConstructionPartsCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayTritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayPyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayMexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayIsogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayNocxiumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayZydrineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayMegacyteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsTritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsPyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsMexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsIsogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsNocxiumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsZydrineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsMegacyteCalculationItem.getParentQuantity());
        assertEquals("64000000", new BigDecimal(capitalPropulsionEngineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("63000000", new BigDecimal(capitalArmorPlateCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("248798512.2", new BigDecimal(capitalCargoBayCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("143462254.47", new BigDecimal(capitalConstructionPartsCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("1748054.0", new BigDecimal(capitalCargoBayTritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("196587.0", new BigDecimal(capitalCargoBayPyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("600231.75", new BigDecimal(capitalCargoBayMexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("162333.0", new BigDecimal(capitalCargoBayIsogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("72480.0", new BigDecimal(capitalCargoBayNocxiumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("130001.3", new BigDecimal(capitalCargoBayZydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("52200.0", new BigDecimal(capitalCargoBayMegacyteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("773456.2", new BigDecimal(capitalConstructionPartsTritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("254778.0", new BigDecimal(capitalConstructionPartsPyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("917491.35", new BigDecimal(capitalConstructionPartsMexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("233427.0", new BigDecimal(capitalConstructionPartsIsogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("110880.0", new BigDecimal(capitalConstructionPartsNocxiumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("244002.44", new BigDecimal(capitalConstructionPartsZydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("172800.0", new BigDecimal(capitalConstructionPartsMegacyteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("64000000", new BigDecimal(capitalPropulsionEngineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("63000000", new BigDecimal(capitalArmorPlateCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("248798512.2", new BigDecimal(capitalCargoBayCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("143462254.47", new BigDecimal(capitalConstructionPartsCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("146836536", new BigDecimal(capitalCargoBayTritaniumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("16513308", new BigDecimal(capitalCargoBayPyeriteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("50419467", new BigDecimal(capitalCargoBayMexallonCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("13635972", new BigDecimal(capitalCargoBayIsogenCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("6088320.0", new BigDecimal(capitalCargoBayNocxiumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("10920109.2", new BigDecimal(capitalCargoBayZydrineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("4384800.0", new BigDecimal(capitalCargoBayMegacyteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("40993178.6", new BigDecimal(capitalConstructionPartsTritaniumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("13503234", new BigDecimal(capitalConstructionPartsPyeriteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("48627041.55", new BigDecimal(capitalConstructionPartsMexallonCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("12371631", new BigDecimal(capitalConstructionPartsIsogenCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("5876640.0", new BigDecimal(capitalConstructionPartsNocxiumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("12932129.32", new BigDecimal(capitalConstructionPartsZydrineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("9158400.0", new BigDecimal(capitalConstructionPartsMegacyteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals(Long.valueOf(16), typeIdToCalculationPriceSetItemMap.get(21009L).getQuantity());
        assertEquals(Long.valueOf(15), typeIdToCalculationPriceSetItemMap.get(21017L).getQuantity());
        assertNull(typeIdToCalculationPriceSetItemMap.get(21027L));
        assertNull(typeIdToCalculationPriceSetItemMap.get(21037L));
        assertEquals(Long.valueOf(85377143), typeIdToCalculationPriceSetItemMap.get(34L).getQuantity());
        assertEquals(Long.valueOf(10005514), typeIdToCalculationPriceSetItemMap.get(35L).getQuantity());
        assertEquals(Long.valueOf(3688883), typeIdToCalculationPriceSetItemMap.get(36L).getQuantity());
        assertEquals(Long.valueOf(509953), typeIdToCalculationPriceSetItemMap.get(37L).getQuantity());
        assertEquals(Long.valueOf(149562), typeIdToCalculationPriceSetItemMap.get(38L).getQuantity());
        assertEquals(Long.valueOf(23852), typeIdToCalculationPriceSetItemMap.get(39L).getQuantity());
        assertEquals(Long.valueOf(7524), typeIdToCalculationPriceSetItemMap.get(40L).getQuantity());
        assertEquals("4000000.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21009L).getPrice()).toPlainString());
        assertEquals("4200000.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21017L).getPrice()).toPlainString());
        assertEquals("2.2", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getPrice()).toPlainString());
        assertEquals("3", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getPrice()).toPlainString());
        assertEquals("26.85", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getPrice()).toPlainString());
        assertEquals("51", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getPrice()).toPlainString());
        assertEquals("80", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(38L).getPrice()).toPlainString());
        assertEquals("1000.01", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getPrice()).toPlainString());
        assertEquals("1800", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(40L).getPrice()).toPlainString());
        assertEquals("64000000", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21009L).getTotalPrice()).toPlainString());
        assertEquals("63000000", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21017L).getTotalPrice()).toPlainString());
        assertEquals("187829714.6", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getTotalPrice()).toPlainString());
        assertEquals("30016542", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getTotalPrice()).toPlainString());
        assertEquals("99046508.55", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getTotalPrice()).toPlainString());
        assertEquals("26007603", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getTotalPrice()).toPlainString());
        assertEquals("11964960", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(38L).getTotalPrice()).toPlainString());
        assertEquals("23852238.52", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getTotalPrice()).toPlainString());
        assertEquals("13543200", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(40L).getTotalPrice()).toPlainString());

        pricingProcessorResult = pricingProcessor.process(10L, calculationTree);
        typeIdToCalculationPriceSetItemMap = pricingProcessorResult.getTypeIdToCalculationPriceSetItemMap();
        assertEquals(9, typeIdToCalculationPriceSetItemMap.size());
        assertEquals("5192607666.7", new BigDecimal(pricingProcessorResult.getTotalPrice()).toPlainString());
        assertEquals(Long.valueOf(16), capitalPropulsionEngineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(15), capitalArmorPlateCalculationItem.getQuantity());
        assertEquals(Long.valueOf(84), capitalCargoBayCalculationItem.getQuantity());
        assertEquals(Long.valueOf(53), capitalConstructionPartsCalculationItem.getQuantity());
        assertEquals(Long.valueOf(794570), capitalCargoBayTritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(65529), capitalCargoBayPyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(22355), capitalCargoBayMexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(3183), capitalCargoBayIsogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(906), capitalCargoBayNocxiumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(130), capitalCargoBayZydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(29), capitalCargoBayMegacyteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(351571), capitalConstructionPartsTritaniumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(84926), capitalConstructionPartsPyeriteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(34171), capitalConstructionPartsMexallonCalculationItem.getQuantity());
        assertEquals(Long.valueOf(4577), capitalConstructionPartsIsogenCalculationItem.getQuantity());
        assertEquals(Long.valueOf(1386), capitalConstructionPartsNocxiumCalculationItem.getQuantity());
        assertEquals(Long.valueOf(244), capitalConstructionPartsZydrineCalculationItem.getQuantity());
        assertEquals(Long.valueOf(96), capitalConstructionPartsMegacyteCalculationItem.getQuantity());
        assertEquals(Long.valueOf(10), capitalPropulsionEngineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(10), capitalArmorPlateCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(10), capitalCargoBayCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(10), capitalConstructionPartsCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayTritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayPyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayMexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayIsogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayNocxiumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayZydrineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(840), capitalCargoBayMegacyteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsTritaniumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsPyeriteCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsMexallonCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsIsogenCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsNocxiumCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsZydrineCalculationItem.getParentQuantity());
        assertEquals(Long.valueOf(530), capitalConstructionPartsMegacyteCalculationItem.getParentQuantity());
        assertEquals("64000000", new BigDecimal(capitalPropulsionEngineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("63000000", new BigDecimal(capitalArmorPlateCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("248798512.2", new BigDecimal(capitalCargoBayCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("143462254.47", new BigDecimal(capitalConstructionPartsCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("1748054.0", new BigDecimal(capitalCargoBayTritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("196587.0", new BigDecimal(capitalCargoBayPyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("600231.75", new BigDecimal(capitalCargoBayMexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("162333.0", new BigDecimal(capitalCargoBayIsogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("72480.0", new BigDecimal(capitalCargoBayNocxiumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("130001.3", new BigDecimal(capitalCargoBayZydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("52200.0", new BigDecimal(capitalCargoBayMegacyteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("773456.2", new BigDecimal(capitalConstructionPartsTritaniumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("254778.0", new BigDecimal(capitalConstructionPartsPyeriteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("917491.35", new BigDecimal(capitalConstructionPartsMexallonCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("233427.0", new BigDecimal(capitalConstructionPartsIsogenCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("110880.0", new BigDecimal(capitalConstructionPartsNocxiumCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("244002.44", new BigDecimal(capitalConstructionPartsZydrineCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("172800.0", new BigDecimal(capitalConstructionPartsMegacyteCalculationItem.getTotalPrice()).toPlainString());
        assertEquals("640000000", new BigDecimal(capitalPropulsionEngineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("630000000", new BigDecimal(capitalArmorPlateCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("2487985122", new BigDecimal(capitalCargoBayCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("1434622544.7", new BigDecimal(capitalConstructionPartsCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("1468365360", new BigDecimal(capitalCargoBayTritaniumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("165133080", new BigDecimal(capitalCargoBayPyeriteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("504194670", new BigDecimal(capitalCargoBayMexallonCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("136359720", new BigDecimal(capitalCargoBayIsogenCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("60883200", new BigDecimal(capitalCargoBayNocxiumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("109201092", new BigDecimal(capitalCargoBayZydrineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("43848000", new BigDecimal(capitalCargoBayMegacyteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("409931786", new BigDecimal(capitalConstructionPartsTritaniumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("135032340", new BigDecimal(capitalConstructionPartsPyeriteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("486270415.5", new BigDecimal(capitalConstructionPartsMexallonCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("123716310", new BigDecimal(capitalConstructionPartsIsogenCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("58766400", new BigDecimal(capitalConstructionPartsNocxiumCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("129321293.2", new BigDecimal(capitalConstructionPartsZydrineCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals("91584000", new BigDecimal(capitalConstructionPartsMegacyteCalculationItem.getTotalPriceForParent()).toPlainString());
        assertEquals(Long.valueOf(160), typeIdToCalculationPriceSetItemMap.get(21009L).getQuantity());
        assertEquals(Long.valueOf(150), typeIdToCalculationPriceSetItemMap.get(21017L).getQuantity());
        assertNull(typeIdToCalculationPriceSetItemMap.get(21027L));
        assertNull(typeIdToCalculationPriceSetItemMap.get(21037L));
        assertEquals(Long.valueOf(853771430), typeIdToCalculationPriceSetItemMap.get(34L).getQuantity());
        assertEquals(Long.valueOf(100055140), typeIdToCalculationPriceSetItemMap.get(35L).getQuantity());
        assertEquals(Long.valueOf(36888830), typeIdToCalculationPriceSetItemMap.get(36L).getQuantity());
        assertEquals(Long.valueOf(5099530), typeIdToCalculationPriceSetItemMap.get(37L).getQuantity());
        assertEquals(Long.valueOf(1495620), typeIdToCalculationPriceSetItemMap.get(38L).getQuantity());
        assertEquals(Long.valueOf(238520), typeIdToCalculationPriceSetItemMap.get(39L).getQuantity());
        assertEquals(Long.valueOf(75240), typeIdToCalculationPriceSetItemMap.get(40L).getQuantity());
        assertEquals("4000000.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21009L).getPrice()).toPlainString());
        assertEquals("4200000.0", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21017L).getPrice()).toPlainString());
        assertEquals("2.2", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getPrice()).toPlainString());
        assertEquals("3", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getPrice()).toPlainString());
        assertEquals("26.85", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getPrice()).toPlainString());
        assertEquals("51", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getPrice()).toPlainString());
        assertEquals("80", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(38L).getPrice()).toPlainString());
        assertEquals("1000.01", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getPrice()).toPlainString());
        assertEquals("1800", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(40L).getPrice()).toPlainString());
        assertEquals("640000000", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21009L).getTotalPrice()).toPlainString());
        assertEquals("630000000", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(21017L).getTotalPrice()).toPlainString());
        assertEquals("1878297146", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(34L).getTotalPrice()).toPlainString());
        assertEquals("300165420", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(35L).getTotalPrice()).toPlainString());
        assertEquals("990465085.5", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(36L).getTotalPrice()).toPlainString());
        assertEquals("260076030", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(37L).getTotalPrice()).toPlainString());
        assertEquals("119649600", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(38L).getTotalPrice()).toPlainString());
        assertEquals("238522385.2", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(39L).getTotalPrice()).toPlainString());
        assertEquals("135432000", new BigDecimal(typeIdToCalculationPriceSetItemMap.get(40L).getTotalPrice()).toPlainString());
    }
}
